/**
*
*Copyright 2010 OuterCurve Foundation
*
*Licensed under the Apache License, Version 2.0 (the "License");
*you may not use this file except in compliance with the License.
*You may obtain a copy of the License at
*
*http://www.apache.org/licenses/LICENSE-2.0
*
*Unless required by applicable law or agreed to in writing, software
*distributed under the License is distributed on an "AS IS" BASIS,
*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*See the License for the specific language governing permissions and
*limitations under the License.
*/
/**
* This code was generated by the tool 'odatagen'.
* Runtime Version:1.0
*
* Changes to this file may cause incorrect behavior and will be lost if
* the code is regenerated.
*/
#import "Entities.h"

 
/**
 * Container interface Entities, Namespace: parastr_thirrpModel
 */
@implementation Entities 

	@synthesize m_OData_etag;

	@synthesize m_Questions;
	@synthesize m_Users;
/**
 * The initializer for Entities accepting service URI
 */
- (id) init
{
	NSString* tmpuri =[[NSString alloc]initWithString:DEFAULT_SERVICE_URL];
	self=[self initWithUri:tmpuri credential:nil];
	[tmpuri release];
	return self;
}

- (id) initWithUri:(NSString*)anUri credential:(id)acredential
{
	NSString* tmpuri=nil;
	if([anUri length]==0)
	{
	 	tmpuri = DEFAULT_SERVICE_URL;
	}
	else
	{
		tmpuri =[NSString stringWithString:anUri];
	}
	if(![tmpuri hasSuffix:@"/"])
	{
		tmpuri=[tmpuri stringByAppendingString:@"/"];
	}

	if(self=[super initWithUri:tmpuri credentials:acredential dataServiceVersion:DataServiceVersion])
	{
		[super setServiceNamespace:@"parastr_thirrpModel"];

		NSMutableArray* tempEntities=[[NSMutableArray alloc]init];
		
		[tempEntities addObject:@"Questions"];
		[tempEntities addObject:@"Users"];

		if([tempEntities count] > 0 )
		{
			[super setEntitiesWithArray:tempEntities];
		}
		[tempEntities release];

		NSMutableArray* tempEntitiySetKey=[[NSMutableArray alloc]init];
		
		[tempEntitiySetKey addObject:@"questions"];
		[tempEntitiySetKey addObject:@"users"];

		NSMutableArray* tempEntitiyTypeobj=[[NSMutableArray alloc]init];
		
		[tempEntitiyTypeobj addObject:@"Questions"];
		[tempEntitiyTypeobj addObject:@"Users"];

		if( ( [tempEntitiySetKey count] > 0 ) && ( [tempEntitiyTypeobj count] > 0 ) )
		{
			[super setEntitySet2TypeWithObject:tempEntitiyTypeobj forKey:tempEntitiySetKey];

		}

		[tempEntitiySetKey release];
		[ tempEntitiyTypeobj release];

		NSMutableArray* tempEntitiyTypeKey=[[NSMutableArray alloc]init];
		
		[tempEntitiyTypeKey addObject:@"questions"];
		[tempEntitiyTypeKey addObject:@"users"];
		NSMutableArray* tempEntitySetObj=[[NSMutableArray alloc]init];
		
		[tempEntitySetObj addObject:@"Questions"];
		[tempEntitySetObj addObject:@"Users"];

		if( ( [tempEntitiyTypeKey count] > 0 ) && ( [tempEntitySetObj count] > 0 ) )
		{
			[super setEntityType2SetWithObject:tempEntitySetObj forKey:tempEntitiyTypeKey];

		}
    	[tempEntitiyTypeKey release];
		[tempEntitySetObj release];

		NSMutableArray* foreignKeys=[[NSMutableArray alloc]init];		
		[foreignKeys addObject:@"FK_Questions_AnswerUserId"];
		[foreignKeys addObject:@"FK_Questions_AskUserId"];

		NSMutableArray *arrOfDictionaries=[[NSMutableArray alloc]initWithCapacity:[foreignKeys count]];

		NSMutableArray *arr;
 
		arr=[[NSMutableArray alloc]init];
		[arr addObject:[[[NSDictionary alloc]initWithObjectsAndKeys:@"Users",@"EndRole",@"Users",@"Type",@"0..1",@"Multiplicity",nil] autorelease]];
		[arr addObject:[[[NSDictionary alloc]initWithObjectsAndKeys:@"Questions",@"EndRole",@"Questions",@"Type",@"*",@"Multiplicity",nil] autorelease]];
		[arrOfDictionaries addObject:arr];
		[arr release];


		arr=[[NSMutableArray alloc]init];
		[arr addObject:[[[NSDictionary alloc]initWithObjectsAndKeys:@"Users",@"EndRole",@"Users",@"Type",@"0..1",@"Multiplicity",nil] autorelease]];
		[arr addObject:[[[NSDictionary alloc]initWithObjectsAndKeys:@"Questions",@"EndRole",@"Questions",@"Type",@"*",@"Multiplicity",nil] autorelease]];
		[arrOfDictionaries addObject:arr];
		[arr release];

		if( ( [foreignKeys count] > 0 ) && ( [arrOfDictionaries count] > 0 ) )
		{
			[super setAssociationforObjects:arrOfDictionaries forKeys:foreignKeys];
		}
		[foreignKeys release];
		[arrOfDictionaries release];

		m_Questions = [[DataServiceQuery alloc]initWithUri:@"Questions" objectContext: self];
		m_Users = [[DataServiceQuery alloc]initWithUri:@"Users" objectContext: self];
		
	}
	return self;
}

/*
 * Method for service operation
 */
- (NSString *) RegisterDeviceWiths:(NSString *)s
{
	NSDictionary *params=[[NSDictionary alloc] initWithObjectsAndKeys:s,@"s",nil];
	NSString *aQuery=[self prepareQuery:@"RegisterDevice" parameters:params];
	[params release];

	return [self executeServiceOperation:aQuery httpMethod:@"GET" isReturnTypeCollection:NO];
}
/*
 * Method for service operation
 */
- (NSString *) AnswerQuestionWithstrquestionid:(NSString *)strQuestionId stranswer:(NSString *)strAnswer
{
	NSDictionary *params=[[NSDictionary alloc] initWithObjectsAndKeys:strQuestionId,@"strQuestionId",strAnswer,@"strAnswer",nil];
	NSString *aQuery=[self prepareQuery:@"AnswerQuestion" parameters:params];
	[params release];

	return [self executeServiceOperation:aQuery httpMethod:@"GET" isReturnTypeCollection:NO];
}
/*
 * Method for service operation
 */
- (NSArray *) GetQuestionToAnswerWithstrlocale:(NSString *)strLocale
{
	NSDictionary *params=[[NSDictionary alloc] initWithObjectsAndKeys:strLocale,@"strLocale",nil];
	NSString *aQuery=[self prepareQuery:@"GetQuestionToAnswer" parameters:params];
	[params release];

	return [self executeServiceOperation:aQuery httpMethod:@"GET" isReturnTypeCollection:YES];
}
/*
 * Method for service operation
 */
- (NSArray *) GetQuestionWithstrquestionid:(NSString *)strQuestionId
{
	NSDictionary *params=[[NSDictionary alloc] initWithObjectsAndKeys:strQuestionId,@"strQuestionId",nil];
	NSString *aQuery=[self prepareQuery:@"GetQuestion" parameters:params];
	[params release];

	return [self executeServiceOperation:aQuery httpMethod:@"GET" isReturnTypeCollection:YES];
}
/*
 * Method for service operation
 */
- (NSArray *) InsertQuestionWithstrlocale:(NSString *)strLocale strquestion:(NSString *)strQuestion
{
	NSDictionary *params=[[NSDictionary alloc] initWithObjectsAndKeys:strLocale,@"strLocale",strQuestion,@"strQuestion",nil];
	NSString *aQuery=[self prepareQuery:@"InsertQuestion" parameters:params];
	[params release];

	return [self executeServiceOperation:aQuery httpMethod:@"GET" isReturnTypeCollection:YES];
}
/*
 * Method for service operation
 */
- (NSArray *) GetQuestionsByUserId
{
	NSString *aQuery=[self prepareQuery:@"GetQuestionsByUserId" parameters:nil];
	return [self executeServiceOperation:aQuery httpMethod:@"GET" isReturnTypeCollection:YES];
}
/*
 * Method for service operation
 */
- (NSString *) ArchiveQuestionWithstrquestionid:(NSString *)strQuestionId
{
	NSDictionary *params=[[NSDictionary alloc] initWithObjectsAndKeys:strQuestionId,@"strQuestionId",nil];
	NSString *aQuery=[self prepareQuery:@"ArchiveQuestion" parameters:params];
	[params release];

	return [self executeServiceOperation:aQuery httpMethod:@"GET" isReturnTypeCollection:NO];
}
/*
 * Method for service operation
 */
- (NSString *) SavePushTokenWiths:(NSString *)s
{
	NSDictionary *params=[[NSDictionary alloc] initWithObjectsAndKeys:s,@"s",nil];
	NSString *aQuery=[self prepareQuery:@"SavePushToken" parameters:params];
	[params release];

	return [self executeServiceOperation:aQuery httpMethod:@"GET" isReturnTypeCollection:NO];
}
/*
 * Method for service operation
 */
- (NSString *) DidViewAnswerWithstrquestionid:(NSString *)strQuestionId
{
	NSDictionary *params=[[NSDictionary alloc] initWithObjectsAndKeys:strQuestionId,@"strQuestionId",nil];
	NSString *aQuery=[self prepareQuery:@"DidViewAnswer" parameters:params];
	[params release];

	return [self executeServiceOperation:aQuery httpMethod:@"GET" isReturnTypeCollection:NO];
}

/**
 * Method returns DataServiceQuery reference for
 * the entityset Questions
 */
- (id) questions
{
	[self.m_Questions clearAllOptions];
	return self.m_Questions;
}

/**
 * Method returns DataServiceQuery reference for
 * the entityset Users
 */
- (id) users
{
	[self.m_Users clearAllOptions];
	return self.m_Users;
}

/**
 * Methods for adding object to the entityset/collection
 */

- (void) addToQuestions:(id)anObject
{
	[super addObject:@"Questions" object:anObject];
}

- (void) addToUsers:(id)anObject
{
	[super addObject:@"Users" object:anObject];
}

- (void) dealloc
{
	[ m_OData_etag release];
	m_OData_etag = nil;
	
	[m_Questions release];
	m_Questions = nil;
	[m_Users release];
	m_Users = nil;

	[super dealloc];
}

@end
/**
 * @interface:Questions
 * @key:QuestionId
 */
@implementation parastr_thirrpModel_Questions
	@synthesize m_QuestionId;
	@synthesize m_Locale;
	@synthesize m_Question;
	@synthesize m_Answer;
	@synthesize m_AskUserId;
	@synthesize m_AskDateTime;
	@synthesize m_AnswerUserId;
	@synthesize m_AnswerDateTime;
	@synthesize m_Archived;
	@synthesize m_ViewedAnswer;
	@synthesize m_Users;
	@synthesize m_Users1;

/**
 *Method to create an instance of Questions
 */
+ (id) CreateQuestionsWithquestionid:(NSNumber *)aQuestionId
{
	parastr_thirrpModel_Questions *aQuestions = [[parastr_thirrpModel_Questions alloc]init];
	
	aQuestions.m_QuestionId = aQuestionId;

	return aQuestions;
}
/**
 * Initialising object for Questions
 */
- (id) init
{
	self=[self initWithUri:nil];
	return self;
}

- (id) initWithUri:(NSString*)anUri 
{
	if(self=[super initWithUri:anUri])
	{
		[self setBaseURI:anUri];
		m_OData_hasStream.booleanvalue=NO;
		[m_OData_entityMap setObject:@"Users" forKey:@"Users"];
		[m_OData_entityMap setObject:@"Users" forKey:@"Users1"];
		mProperties *obj;
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.Int32" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:NO Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_QuestionId"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"10" MinLength:@"" FixedLength:NO Nullable:YES Unicode:YES ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_Locale"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"4000" MinLength:@"" FixedLength:NO Nullable:YES Unicode:YES ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_Question"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"4000" MinLength:@"" FixedLength:NO Nullable:YES Unicode:YES ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_Answer"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.Int32" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_AskUserId"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.DateTime" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_AskDateTime"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.Int32" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_AnswerUserId"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.DateTime" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_AnswerDateTime"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.Boolean" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_Archived"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.Boolean" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_ViewedAnswer"];
		[obj release];
		
		[m_OData_entityFKRelation setObject:@"FK_Questions_AnswerUserId" forKey:@"Users"];
		[m_OData_entityFKRelation setObject:@"FK_Questions_AskUserId" forKey:@"Users"];

		NSMutableArray *anEntityKey=[[NSMutableArray alloc]init];
		[anEntityKey addObject:@"QuestionId"];
		[m_OData_entityKey setObject:anEntityKey forKey:@"Questions"];
		[anEntityKey release];
	}
	return self;
}

-(NSMutableArray *)getSyndicateArray
{
	NSMutableArray *syndicateArray=[[NSMutableArray alloc]init];
	
	return [syndicateArray autorelease];
}
-(parastr_thirrpModel_Questions *)getDeepCopy
{
	parastr_thirrpModel_Questions *obj=[[parastr_thirrpModel_Questions alloc]initWithUri:[self getBaseURI]];
	[obj setQuestionId:[self getQuestionId]];
	[obj setLocale:[self getLocale]];
	[obj setQuestion:[self getQuestion]];
	[obj setAnswer:[self getAnswer]];
	[obj setAskUserId:[self getAskUserId]];
	[obj setAskDateTime:[self getAskDateTime]];
	[obj setAnswerUserId:[self getAnswerUserId]];
	[obj setAnswerDateTime:[self getAnswerDateTime]];
	[obj setArchived:[self getArchived]];
	[obj setViewedAnswer:[self getViewedAnswer]];
	[obj setUsers:[self getUsers]];
	[obj setUsers1:[self getUsers1]];

	return [obj autorelease];
}
- (void) dealloc
{
	[m_QuestionId release];
	m_QuestionId = nil;
	[m_Locale release];
	m_Locale = nil;
	[m_Question release];
	m_Question = nil;
	[m_Answer release];
	m_Answer = nil;
	[m_AskUserId release];
	m_AskUserId = nil;
	[m_AskDateTime release];
	m_AskDateTime = nil;
	[m_AnswerUserId release];
	m_AnswerUserId = nil;
	[m_AnswerDateTime release];
	m_AnswerDateTime = nil;
	[m_Archived release];
	m_Archived = nil;
	[m_ViewedAnswer release];
	m_ViewedAnswer = nil;
	
	[m_Users release];
	m_Users = nil;
	[m_Users1 release];
	m_Users1 = nil;
	[super dealloc];
}

@end
/**
 * @interface:Users
 * @key:UserId
 */
@implementation parastr_thirrpModel_Users
	@synthesize m_UserId;
	@synthesize m_DeviceID;
	@synthesize m_DeviceToken;
	@synthesize m_BadgeCount;
	@synthesize m_Questions;
	@synthesize m_Questions1;

/**
 *Method to create an instance of Users
 */
+ (id) CreateUsersWithuserid:(NSNumber *)aUserId deviceid:(NSString *)aDeviceID
{
	parastr_thirrpModel_Users *aUsers = [[parastr_thirrpModel_Users alloc]init];
	
	aUsers.m_UserId = aUserId;

	
	aUsers.m_DeviceID = aDeviceID;

	return aUsers;
}
/**
 * Initialising object for Users
 */
- (id) init
{
	self=[self initWithUri:nil];
	return self;
}

- (id) initWithUri:(NSString*)anUri 
{
	if(self=[super initWithUri:anUri])
	{
		[self setBaseURI:anUri];
		m_OData_hasStream.booleanvalue=NO;
		[m_OData_entityMap setObject:@"Questions" forKey:@"Questions"];
		[m_OData_entityMap setObject:@"Questions" forKey:@"Questions1"];
		mProperties *obj;
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.Int32" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:NO Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_UserId"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"40" MinLength:@"" FixedLength:YES Nullable:NO Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_DeviceID"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"64" MinLength:@"" FixedLength:YES Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_DeviceToken"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.Int32" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_BadgeCount"];
		[obj release];
		
		[m_OData_entityFKRelation setObject:@"FK_Questions_AnswerUserId" forKey:@"Questions"];
		[m_OData_entityFKRelation setObject:@"FK_Questions_AskUserId" forKey:@"Questions"];

		NSMutableArray *anEntityKey=[[NSMutableArray alloc]init];
		[anEntityKey addObject:@"UserId"];
		[m_OData_entityKey setObject:anEntityKey forKey:@"Users"];
		[anEntityKey release];
	}
	return self;
}

-(NSMutableArray *)getSyndicateArray
{
	NSMutableArray *syndicateArray=[[NSMutableArray alloc]init];
	
	return [syndicateArray autorelease];
}
-(parastr_thirrpModel_Users *)getDeepCopy
{
	parastr_thirrpModel_Users *obj=[[parastr_thirrpModel_Users alloc]initWithUri:[self getBaseURI]];
	[obj setUserId:[self getUserId]];
	[obj setDeviceID:[self getDeviceID]];
	[obj setDeviceToken:[self getDeviceToken]];
	[obj setBadgeCount:[self getBadgeCount]];
	[obj setQuestions:[self getQuestions]];
	[obj setQuestions1:[self getQuestions1]];

	return [obj autorelease];
}
- (void) dealloc
{
	[m_UserId release];
	m_UserId = nil;
	[m_DeviceID release];
	m_DeviceID = nil;
	[m_DeviceToken release];
	m_DeviceToken = nil;
	[m_BadgeCount release];
	m_BadgeCount = nil;
	
	[m_Questions release];
	m_Questions = nil;
	[m_Questions1 release];
	m_Questions1 = nil;
	[super dealloc];
}

@end
